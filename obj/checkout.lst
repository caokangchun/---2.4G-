C51 COMPILER V9.01   CHECKOUT                                                              11/05/2018 10:27:17 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE CHECKOUT
OBJECT MODULE PLACED IN .\obj\checkout.obj
COMPILER INVOKED BY: D:\Keil_v511\C51\BIN\C51.EXE code\system\src\checkout.c LARGE BROWSE INTVECTOR(0X1800) INCDIR(.\cod
                    -e\app\inc;.\code\driver\inc;.\code\system\inc;.\code\usb) DEFINE(__KEIL_C51__) DEBUG OBJECTEXTEND PRINT(.\obj\checkout.l
                    -st) OBJECT(.\obj\checkout.obj)

line level    source

   1          
   2          #include "includes.h"
   3          
   4          //---------------------------------------------------------------------------------------
   5          //      Description     :       calc XOR check value
   6          //      Parameters      :       none
   7          //      Return          :       none
   8          //      Author          :       RAY
   9          //      Date            :       2014 - 09 - 22
  10          //---------------------------------------------------------------------------------------
  11          UINT8 calc_xor_value(const UINT8 *src, UINT8 len)
  12          {
  13   1              UINT8 i, tmp;
  14   1      
  15   1              for(i = 0, tmp = 0; i < len; i++)
  16   1              {
  17   2                      tmp ^= src[i];
  18   2              }
  19   1      
  20   1              return tmp;
  21   1      }
  22          
  23          
  24          //---------------------------------------------------------------------------------------
  25          //      Description     :       data XOR check
  26          //      Parameters      :       none
  27          //      Return          :       none
  28          //      Author          :       RAY
  29          //      Date            :       2014 - 09 - 22
  30          //---------------------------------------------------------------------------------------
  31          BOOL data_xor_check(const UINT8 *src, UINT8 len, UINT8 xor)
  32          {
  33   1              UINT8 tmp;
  34   1      
  35   1              tmp = calc_xor_value(src, len);
  36   1      
  37   1              if(tmp == xor)
  38   1              {
  39   2                      return TRUE;
  40   2              }
  41   1      
  42   1              return FALSE;
  43   1      }
  44          
  45          
  46          //---------------------------------------------------------------------------------------
  47          //      Description     :       zero value check
  48          //      Parameters      :       none
  49          //      Return          :       none
  50          //      Author          :       RAY
  51          //      Date            :       2014 - 09 - 27
  52          //---------------------------------------------------------------------------------------
  53          BOOL data_zero_check(const UINT8 *src, UINT8 len)
C51 COMPILER V9.01   CHECKOUT                                                              11/05/2018 10:27:17 PAGE 2   

  54          {
  55   1              UINT8 i;
  56   1      
  57   1              for(i = 0; i < len; i++)
  58   1              {
  59   2                      if(src[i] != 0)
  60   2                      {
  61   3                              return FALSE;
  62   3                      }
  63   2              }
  64   1      
  65   1              return TRUE;
  66   1      }
  67          
  68          //---------------------------------------------------------------------------------------
  69          //      Description     :       zero value check
  70          //      Parameters      :       none
  71          //      Return          :       none
  72          //      Author          :       RAY
  73          //      Date            :       2014 - 09 - 27
  74          //---------------------------------------------------------------------------------------
  75          UINT8 calc_sum_value(const UINT8 *src, UINT8 len)
  76          {
  77   1          UINT8 i;
  78   1          UINT8 sum = 0;
  79   1      
  80   1          for(i = 0; i < len; i++)
  81   1          {
  82   2              sum += src[i];
  83   2          }
  84   1      
  85   1          return sum;
  86   1      }
  87          
  88          #define POLY        0x1021
  89          #define INIT        0xFFFF
  90          
  91          /** 
  92           * Calculating CRC-16 in 'C' 
  93           * @para addr, start of data 
  94           * @para num, length of data 
  95           * @para crc, incoming CRC 
  96           */  
  97          UINT16 calc_crc16_ccitt(UINT8 *pdat, UINT8 len)
  98          {
  99   1          UINT8 i, j;
 100   1          UINT16 crc_reg = INIT;
 101   1          UINT16 crc_cur;
 102   1          
 103   1          for (i = 0; i < len; i++)                   /* Step through bytes in memory */
 104   1          {
 105   2              crc_cur = pdat[i];
 106   2              crc_cur <<= 8;                          /* Fetch byte from memory */
 107   2              crc_reg ^= crc_cur;                     /* XOR into CRC top byte*/
 108   2              for (j = 0; j < 8; j++)                 /* Prepare to rotate 8 bits */
 109   2              {
 110   3                  if (crc_reg & 0x8000)               /* b15 is set... */
 111   3                      crc_reg = (crc_reg<<1)^POLY;    /* rotate and XOR with polynomic */
 112   3                  else                                /* b15 is clear... */
 113   3                      crc_reg <<= 1;                  /* just rotate */
 114   3              }                                       /* Loop for 8 bits */
 115   2              //crc_reg &= 0xFFFF;                    /* Ensure CRC remains 16-bit value */
C51 COMPILER V9.01   CHECKOUT                                                              11/05/2018 10:27:17 PAGE 3   

 116   2          }                                           /* Loop until num=0 */
 117   1          
 118   1          return(crc_reg);                            /* Return updated CRC */
 119   1      }  
 120          
 121          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    298    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      22
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
